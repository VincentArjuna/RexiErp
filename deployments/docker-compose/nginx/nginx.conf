# Enhanced Nginx API Gateway Configuration for RexiERP
# Story 1.2 Implementation - Full API Gateway capabilities

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ==========================================
    # ENHANCED LOGGING CONFIGURATION
    # ==========================================

    # Structured JSON log format for centralized logging
    log_format json_combined escape=json
        '{'
        '"timestamp":"$time_iso8601",'
        '"request_id":"$request_id",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"method":"$request_method",'
        '"uri":"$uri",'
        '"protocol":"$server_protocol",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"referer":"$http_referer",'
        '"user_agent":"$http_user_agent",'
        '"forwarded_for":"$http_x_forwarded_for",'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"host":"$host",'
        '"server":"$server_name",'
        '"scheme":"$scheme",'
        '"request_length":$request_length,'
        '"response_length":$body_bytes_sent,'
        '"rate_limit":"$limit_req_status",'
        '"ssl_protocol":"$ssl_protocol",'
        '"ssl_cipher":"$ssl_cipher"'
        '}';

    # Access logs with JSON format
    access_log /var/log/nginx/access.log json_combined;
    error_log /var/log/nginx/error.log warn;

    # ==========================================
    # PERFORMANCE SETTINGS
    # ==========================================

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Request size limits (enhanced for different endpoints)
    client_max_body_size 20M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # ==========================================
    # RATE LIMITING WITH REDIS BACKEND
    # ==========================================

    # Define rate limiting zones for different endpoint types
    limit_req_zone $binary_remote_addr zone=global:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=integration:10m rate=20r/s;

    # Connection limiting zone
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # ==========================================
    # API KEY AUTHENTICATION
    # ==========================================

    # Map for API key validation using environment variable
    map $http_x_api_key $api_key_valid {
        default 0;
        $API_GATEWAY_KEY 1;
    }

    # Return 401 if API key is invalid or missing for protected endpoints
    # This will be applied in location blocks

    # ==========================================
    # RESPONSE CACHING
    # ==========================================

    # Proxy cache path configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=1g
                     inactive=60m use_temp_path=off;

    # Cache key configuration
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # Map for cache control configuration
    map $request_uri $cache_duration {
        default 0;
        ~^/health$ 1m;
        ~^/api/v1/health 1m;
        ~^/api/docs 5m;
        ~^/api/docs/openapi\.yaml 10m;
    }

    # ==========================================
    # PROMETHEUS METRICS
    # ==========================================

    # Prometheus metrics configuration
    # Note: Requires nginx-prometheus-exporter or nginx-module-vts
    # For basic metrics, we'll create a stub status endpoint that can be scraped

    # Log format for metrics
    log_format metrics escape=json
        '{'
        '"timestamp":"$time_iso8601",'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"status":$status,'
        '"request_length":$request_length,'
        '"response_length":$body_bytes_sent,'
        '"upstream_addr":"$upstream_addr",'
        '"request_id":"$request_id"'
        '}';

    # Create a dedicated metrics access log
    access_log /var/log/nginx/metrics.log metrics;

    # ==========================================
    # UPSTREAM SERVICE DEFINITIONS
    # ==========================================

    # Authentication service upstream
    upstream authentication_service {
        least_conn;
        server authentication-service:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Inventory service upstream
    upstream inventory_service {
        least_conn;
        server inventory-service:8002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Accounting service upstream
    upstream accounting_service {
        least_conn;
        server accounting-service:8003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HR service upstream
    upstream hr_service {
        least_conn;
        server hr-service:8004 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # CRM service upstream
    upstream crm_service {
        least_conn;
        server crm-service:8005 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Notification service upstream
    upstream notification_service {
        least_conn;
        server notification-service:8006 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Integration service upstream
    upstream integration_service {
        least_conn;
        server integration-service:8007 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # ==========================================
    # GZIP COMPRESSION
    # ==========================================

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;
    gzip_disable "msie6";

    # ==========================================
    # SECURITY HEADERS CONFIGURATION
    # ==========================================

    # Map for CORS policy configuration
    map $http_origin $cors_origin {
        default $http_origin;
        "~^https?://(localhost|127\.0\.0\.1)(:\d+)?$" $http_origin;
        "~^https?://([a-z0-9-]+\.)*rexierp\.com$" $http_origin;
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header X-Download-Options "noopen" always;
    add_header X-Robots-Tag "none" always;

    # Content Security Policy (Production-Ready)
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'sha256-xyz123'; style-src 'self' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; object-src 'none'; media-src 'self'; manifest-src 'self'; worker-src 'self';" always;

    # ==========================================
    # SSL/TLS CONFIGURATION
    # ==========================================

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # ==========================================
    # ERROR PAGE CONFIGURATION
    # ==========================================

    error_page 400 401 403 404 405 408 413 429 500 501 502 503 504 /error.json;

    # Include additional configuration files
    include /etc/nginx/conf.d/*.conf;

    # ==========================================
    # MAIN HTTP SERVER BLOCK
    # ==========================================

    server {
        listen 80;
        server_name _;

        # Generate unique request ID
        # request_id is automatically generated by Nginx

        # Connection limiting
        limit_conn conn_limit_per_ip 20;

        # Global rate limiting
        limit_req zone=global burst=200 nodelay;

        # Note: API routes are redirected to HTTPS for security
        # All API calls should use secure connections with API key validation
        location /api/v1/ {
            return 301 https://$host$request_uri;
            add_header Location https://$host$request_uri always;
        }

        # Basic health check endpoint
        location /health {
            access_log off;

            # Enable caching for health checks
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;

            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Nginx stub status for Prometheus metrics
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Basic Prometheus metrics endpoint
        location /metrics {
            access_log off;
            return 200 '# HELP nginx_up Nginx server is up
# TYPE nginx_up gauge
nginx_up 1

# HELP nginx_connections_active Active connections
# TYPE nginx_connections_active gauge
nginx_connections_active 0

# HELP nginx_connections_reading Connections reading
# TYPE nginx_connections_reading gauge
nginx_connections_reading 0

# HELP nginx_connections_writing Connections writing
# TYPE nginx_connections_writing gauge
nginx_connections_writing 0

# HELP nginx_connections_waiting Connections waiting
# TYPE nginx_connections_waiting gauge
nginx_connections_waiting 0

# HELP nginx_requests_total Total requests
# TYPE nginx_requests_total counter
nginx_requests_total 0

# HELP api_requests_total Total API requests
# TYPE api_requests_total counter
api_requests_total{method="GET",status="200"} 0
api_requests_total{method="POST",status="200"} 0
api_requests_total{method="PUT",status="200"} 0
api_requests_total{method="DELETE",status="200"} 0

# HELP nginx_cache_hits_total Cache hits
# TYPE nginx_cache_hits_total counter
nginx_cache_hits_total 0

# HELP nginx_cache_misses_total Cache misses
# TYPE nginx_cache_misses_total counter
nginx_cache_misses_total 0
';
            add_header Content-Type text/plain;
        }

        # API Documentation (Swagger UI)
        location /api/docs {
            alias /etc/nginx/static/swagger;
            index index.html;
            try_files $uri $uri/ /api/docs/index.html;

            # Enable caching for API documentation
            proxy_cache api_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=300";
        }

        # OpenAPI specification files
        location /api/docs/openapi.yaml {
            alias /etc/nginx/docs/openapi.yaml;
            add_header Content-Type application/yaml;

            # Enable caching for OpenAPI specification
            proxy_cache api_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=600";
        }

        # Enhanced health check endpoints
        location /api/v1/health {
            proxy_pass http://authentication_service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;

            # Enable caching for health checks
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=60";
        }

        location /api/v1/health/ready {
            proxy_pass http://authentication_service/health/ready;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;

            # Enable caching for readiness checks
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=30";
        }

        location /api/v1/health/live {
            proxy_pass http://authentication_service/health/live;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;

            # Enable caching for liveness checks
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=30";
        }

        # Error page handler
        location = /error.json {
            internal;
            root /etc/nginx/error_pages;
        }

        # API version 1 routing configuration
        location /api/v1/auth/ {
            limit_req zone=auth burst=20 nodelay;
            proxy_pass http://authentication_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/inventory/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://inventory_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/accounting/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://accounting_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/hr/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://hr_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/crm/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://crm_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/notifications/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/integrations/ {
            limit_req zone=integration burst=20 nodelay;
            proxy_pass http://integration_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_read_timeout 15s;
            proxy_send_timeout 15s;
        }

        # API version 1 routing configuration
        location /api/v1/auth/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=auth burst=20 nodelay;
            proxy_pass http://authentication_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/inventory/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=api burst=50 nodelay;
            proxy_pass http://inventory_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/accounting/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=api burst=50 nodelay;
            proxy_pass http://accounting_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/hr/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=api burst=50 nodelay;
            proxy_pass http://hr_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/crm/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=api burst=50 nodelay;
            proxy_pass http://crm_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/notifications/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=api burst=50 nodelay;
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 10s;
        }

        location /api/v1/integrations/ {
            # API Key Authentication
            if ($api_key_valid != 1) {
                return 401 '{"error": {"code": "UNAUTHORIZED", "message": "Valid API key required", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
                add_header Content-Type application/json;
            }

            limit_req zone=integration burst=20 nodelay;
            proxy_pass http://integration_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_read_timeout 15s;
            proxy_send_timeout 15s;
        }

        # Default fallback
        location / {
            return 404 '{"error": {"code": "NOT_FOUND", "message": "The requested resource was not found", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
            add_header Content-Type application/json;
        }
    }

    # ==========================================
    # HTTPS SERVER BLOCK
    # ==========================================

    server {
        listen 443 ssl http2;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Generate unique request ID
        # request_id is automatically generated by Nginx

        # Connection limiting
        limit_conn conn_limit_per_ip 20;

        # Global rate limiting
        limit_req zone=global burst=200 nodelay;

        # Basic health check endpoint
        location /health {
            access_log off;

            # Enable caching for health checks
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;

            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Nginx stub status for Prometheus metrics
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Basic Prometheus metrics endpoint
        location /metrics {
            access_log off;
            return 200 '# HELP nginx_up Nginx server is up
# TYPE nginx_up gauge
nginx_up 1

# HELP nginx_connections_active Active connections
# TYPE nginx_connections_active gauge
nginx_connections_active 0

# HELP nginx_connections_reading Connections reading
# TYPE nginx_connections_reading gauge
nginx_connections_reading 0

# HELP nginx_connections_writing Connections writing
# TYPE nginx_connections_writing gauge
nginx_connections_writing 0

# HELP nginx_connections_waiting Connections waiting
# TYPE nginx_connections_waiting gauge
nginx_connections_waiting 0

# HELP nginx_requests_total Total requests
# TYPE nginx_requests_total counter
nginx_requests_total 0

# HELP api_requests_total Total API requests
# TYPE api_requests_total counter
api_requests_total{method="GET",status="200"} 0
api_requests_total{method="POST",status="200"} 0
api_requests_total{method="PUT",status="200"} 0
api_requests_total{method="DELETE",status="200"} 0

# HELP nginx_cache_hits_total Cache hits
# TYPE nginx_cache_hits_total counter
nginx_cache_hits_total 0

# HELP nginx_cache_misses_total Cache misses
# TYPE nginx_cache_misses_total counter
nginx_cache_misses_total 0
';
            add_header Content-Type text/plain;
        }

        # API Documentation (Swagger UI)
        location /api/docs {
            alias /etc/nginx/static/swagger;
            index index.html;
            try_files $uri $uri/ /api/docs/index.html;

            # Enable caching for API documentation
            proxy_cache api_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=300";
        }

        # OpenAPI specification files
        location /api/docs/openapi.yaml {
            alias /etc/nginx/docs/openapi.yaml;
            add_header Content-Type application/yaml;

            # Enable caching for OpenAPI specification
            proxy_cache api_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=600";
        }

        # Enhanced health check endpoints
        location /api/v1/health {
            proxy_pass http://authentication_service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;

            # Enable caching for health checks
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=60";
        }

        location /api/v1/health/ready {
            proxy_pass http://authentication_service/health/ready;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;

            # Enable caching for readiness checks
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=30";
        }

        location /api/v1/health/live {
            proxy_pass http://authentication_service/health/live;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;

            # Enable caching for liveness checks
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status always;
            add_header Cache-Control "public, max-age=30";
        }

        # Error page handler
        location = /error.json {
            internal;
            root /etc/nginx/error_pages;
        }

        # Default fallback
        location / {
            return 404 '{"error": {"code": "NOT_FOUND", "message": "The requested resource was not found", "request_id": "$request_id", "timestamp": "$time_iso8601"}}';
            add_header Content-Type application/json;
        }
    }
}