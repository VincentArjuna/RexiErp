{
  "info": {
    "_postman_id": "rexi-erp-gateway-api-tests",
    "name": "RexiERP API Gateway Tests",
    "description": "Comprehensive API tests for RexiERP API Gateway (Story 1.2)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Basic Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has healthy content\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"healthy\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is text/plain\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\", \"text/plain\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Enhanced Health Check - Ready",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status indicates service status\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 503, 502]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health/ready",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health", "ready"]
            }
          }
        },
        {
          "name": "Enhanced Health Check - Live",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status indicates liveness\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 503, 502]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health/live",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health", "live"]
            }
          }
        }
      ]
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Swagger UI",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Content-Type is HTML\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
                  "});",
                  "",
                  "pm.test(\"Response contains Swagger UI\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"swagger\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/docs/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "docs", ""]
            }
          }
        },
        {
          "name": "OpenAPI Specification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Content-Type is YAML\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/yaml\");",
                  "});",
                  "",
                  "pm.test(\"Response contains OpenAPI spec\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"openapi\");",
                  "    pm.expect(pm.response.text()).to.include(\"RexiERP\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/docs/openapi.yaml",
              "host": ["{{baseUrl}}"],
              "path": ["api", "docs", "openapi.yaml"]
            }
          }
        }
      ]
    },
    {
      "name": "API Versioning",
      "item": [
        {
          "name": "Auth Service Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response indicates routing is working\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([502, 503, 504, 404]);",
                  "});",
                  "",
                  "pm.test(\"Request ID header is present\", function () {",
                  "    if (pm.response.headers.get(\"X-Request-ID\")) {",
                  "        pm.expect(pm.response.headers.get(\"X-Request-ID\")).to.match(/^req_[a-z0-9]+$/);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Inventory Service Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response indicates routing is working\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([502, 503, 504, 401]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer test-token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/inventory/products?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "inventory", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Invalid Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response format is correct\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property(\"error\");",
                  "    pm.expect(response.error).to.have.property(\"code\", \"NOT_FOUND\");",
                  "    pm.expect(response.error).to.have.property(\"message\");",
                  "    pm.expect(response.error).to.have.property(\"request_id\");",
                  "    pm.expect(response.error).to.have.property(\"timestamp\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/nonexistent/service",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "nonexistent", "service"]
            }
          }
        }
      ]
    },
    {
      "name": "CORS Tests",
      "item": [
        {
          "name": "CORS Preflight - Auth Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"CORS headers are present\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.eql(\"http://localhost:3000\");",
                  "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.include(\"POST\");",
                  "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Headers\")).to.include(\"Authorization\");",
                  "    pm.expect(pm.response.headers.get(\"Access-Control-Max-Age\")).to.eql(\"1728000\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Authorization,Content-Type"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "CORS - Different Origin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"CORS headers reflect request origin\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.eql(\"https://app.rexierp.com\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "https://app.rexierp.com"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "GET"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/inventory/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "inventory", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "Security Headers",
      "item": [
        {
          "name": "Security Headers Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"X-Frame-Options header is present\", function () {",
                  "    pm.expect(pm.response.headers.get(\"X-Frame-Options\")).to.eql(\"SAMEORIGIN\");",
                  "});",
                  "",
                  "pm.test(\"X-XSS-Protection header is present\", function () {",
                  "    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).to.eql(\"1; mode=block\");",
                  "});",
                  "",
                  "pm.test(\"X-Content-Type-Options header is present\", function () {",
                  "    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.eql(\"nosniff\");",
                  "});",
                  "",
                  "pm.test(\"Referrer-Policy header is present\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Referrer-Policy\")).to.include(\"strict-origin-when-cross-origin\");",
                  "});",
                  "",
                  "pm.test(\"Content-Security-Policy header is present\", function () {",
                  "    const csp = pm.response.headers.get(\"Content-Security-Policy\");",
                  "    pm.expect(csp).to.include(\"default-src 'self'\");",
                  "    pm.expect(csp).to.include(\"frame-ancestors 'none'\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "Rate Limiting",
      "item": [
        {
          "name": "Rate Limiting Test - Multiple Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test should be run in a collection with multiple iterations",
                  "pm.test(\"Request completed\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429, 502, 503]);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit response headers\", function () {",
                  "        pm.expect(pm.response.headers.get(\"Retry-After\")).to.exist;",
                  "    });",
                  "    console.log(\"Rate limiting is working - request blocked\");",
                  "} else {",
                  "    console.log(\"Request allowed\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "SSL/TLS Tests",
      "item": [
        {
          "name": "HTTPS Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"HTTPS is working\", function () {",
                  "    pm.expect(pm.request.url.protocol).to.eql(\"https\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{secureUrl}}/health",
              "host": ["{{secureUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "secureUrl",
      "value": "https://localhost:8443",
      "type": "string"
    }
  ]
}